// <auto-generated />
using System;
using GalleryWebShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GalleryWebShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230627133614_SeedDataIntoTabčesProductandUserandCategoryandProductsCategory")]
    partial class SeedDataIntoTabčesProductandUserandCategoryandProductsCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GalleryWebShop.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a7966536-0d4c-4a62-ae00-88a09ab5a000",
                            AccessFailedCount = 0,
                            Address = "Ulica grada Vukovara 22",
                            ConcurrencyStamp = "dc7edb68-df21-40b6-ba24-57d85aca6a7d",
                            Email = "ana@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ana",
                            Image = "2023-06-26-10-59-11_ana.jpg",
                            LastName = "Programerić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA@GMAIL.COM",
                            NormalizedUserName = "ANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBOFGaSUUpJnMPobD1++bvBd8Th9MgbM2IwOVmtGmZU1N6yxoWXW0rD4E72+xVqwrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "615564f4-6535-4df5-a6a7-e16a44485a5d",
                            TwoFactorEnabled = false,
                            UserName = "ana@gmail.com"
                        },
                        new
                        {
                            Id = "0723229f-5f2d-41d6-9623-dfa2f77b9c4a",
                            AccessFailedCount = 0,
                            Address = "Ulica Ivana Kozarca 28",
                            ConcurrencyStamp = "1b957287-914d-4488-97e3-e225e07c59e7",
                            Email = "miki@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mićo",
                            Image = "2023-06-26-05-42-10_mico.jpg",
                            LastName = "Dizajnerić",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKI@GMAIL.COM",
                            NormalizedUserName = "MIKI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPiAgo5wuJVrylDL7FtRJSyzYN+PeCptX39aNbR0o7ruQQ6Ilg7q3s4tXwVWWWfVrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c0fe625-5a44-4d37-abd2-6454ccd7ab66",
                            TwoFactorEnabled = false,
                            UserName = "miki@gmail.com"
                        });
                });

            modelBuilder.Entity("GalleryWebShop.Areas.Identity.Models.EditUser", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(256)");

                    b.ToTable("EditUser", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("GalleryWebShop.Areas.Identity.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordConfirmation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId");

                    b.ToTable("User", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("GalleryWebShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Acrylic paints are water-based and acrylic paint tends to be more vibrant in color due to its fast dry time.",
                            Title = "Acril"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A type of paint that dries slowly and consists of pigment particles suspended in oil for drying, mostly linseed oil.",
                            Title = "Oil"
                        });
                });

            modelBuilder.Entity("GalleryWebShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GalleryWebShop.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("GalleryWebShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("InStock")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Seascape using the acrylic  on canvas technique.",
                            Image = "2023-06-24-12-11-35_sea.jpg",
                            InStock = 1m,
                            Price = 250.00m,
                            Size = "30x45",
                            Sku = "1dfd314716",
                            Title = "Rippling sea"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bird portrait using the oil on canvas technique.",
                            Image = "2023-06-23-06-52-54_bird.jpg",
                            InStock = 1m,
                            Price = 320.00m,
                            Size = "30x30",
                            Sku = "4632ec6f16",
                            Title = "Bird song"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Nature scape using the acrylic on canvas technique.",
                            Image = "2023-06-23-06-53-16_unsplash.jpg",
                            InStock = 2m,
                            Price = 260.00m,
                            Size = "20x30",
                            Sku = "dfa45d4dfa",
                            Title = "Autumn over the river"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Abstract painting of face using Oil technice.",
                            Image = "2023-06-22-07-11-17_face.jpg",
                            InStock = 5m,
                            Price = 670.00m,
                            Size = "50x70",
                            Sku = "ela45d4d11",
                            Title = "Conqueror's view"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Abstract painting of world with using ink wash technic.",
                            Image = "2023-06-22-07-12-09_abstract3.jpg",
                            InStock = 2m,
                            Price = 345.00m,
                            Size = "50x80",
                            Sku = "5jfd314733",
                            Title = "Abstract World"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A drawing made with light and shadow, i.e. tones, then such a drawing is called a tonal or painterly drawing.",
                            Image = "2023-06-23-06-54-50_animals.jpg",
                            InStock = 3m,
                            Price = 880.00m,
                            Size = "50x70",
                            Sku = "kk545d4dfa",
                            Title = "Forest story"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A drawing made with light and shadow, i.e. tones, then such a drawing is called a tonal or painterly drawing.",
                            Image = "2023-06-22-07-13-13_cats.jpg",
                            InStock = 1m,
                            Price = 550.00m,
                            Size = "60x80",
                            Sku = "dfa4545zuh",
                            Title = "Playful cats"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Deep blue sea drawn with acrylic technique.",
                            Image = "2023-06-22-07-13-56_water.jpg",
                            InStock = 1m,
                            Price = 290.00m,
                            Size = "50x70",
                            Sku = "12sd8d4d22",
                            Title = "Deep sea"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Flowers in a vase painted with acrylic technique",
                            Image = "2023-06-22-07-14-38_flower.jpg",
                            InStock = 1m,
                            Price = 385.00m,
                            Size = "90x70",
                            Sku = "12h23d4d22",
                            Title = "Garden flowers"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Flowers in a vase in summer painted with acrylic technique.",
                            Image = "2023-06-23-06-55-27_flowers2.jpg",
                            InStock = 1m,
                            Price = 450.00m,
                            Size = "50x80",
                            Sku = "dfa45fff11",
                            Title = "Summer touch"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Abstract painting of life using oil technic.",
                            Image = "2023-06-22-07-15-42_abstract2jpg.jpg",
                            InStock = 2m,
                            Price = 330.00m,
                            Size = "90x50",
                            Sku = "gga45d4333",
                            Title = "Abstract Life"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Abstract painting of soul using ink wash technic.",
                            Image = "2023-06-22-07-16-08_abstract4.jpg",
                            InStock = 1m,
                            Price = 320.00m,
                            Size = "90x70",
                            Sku = "gzt5derfa",
                            Title = "Abstract  Soul"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Cat portret using watercolor technic.",
                            Image = "2023-06-22-07-16-47_cat.jpg",
                            InStock = 1m,
                            Price = 290.00m,
                            Size = "90x50",
                            Sku = "89hzud4882",
                            Title = "Cat"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Waterfall on river using watercolor technic.",
                            Image = "2023-06-23-07-46-00_waterfall.jpg",
                            InStock = 1m,
                            Price = 140.00m,
                            Size = "40x50",
                            Sku = "ed456d2w3e",
                            Title = "Waterfall"
                        },
                        new
                        {
                            Id = 15,
                            Description = "The simple shape is not too uniform and symmetrical. Apple painted using watercolor technic.",
                            Image = "2023-06-23-07-46-22_apple.jpg",
                            InStock = 2m,
                            Price = 220.00m,
                            Size = "50x70",
                            Sku = "afadj33dfa",
                            Title = "Apple"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Fruits in silence was painted using the acrylic technique on canvas.",
                            Image = "2023-06-23-06-56-22_fruit.jpg",
                            InStock = 1m,
                            Price = 550.00m,
                            Size = "50x80",
                            Sku = "t37dj24ddd",
                            Title = "Fruit in silence"
                        },
                        new
                        {
                            Id = 17,
                            Description = "The hungry fox in the manor's court was painted using the technique of drawing on canvas.",
                            Image = "2023-06-23-07-46-45_fox.jpg",
                            InStock = 2m,
                            Price = 310.00m,
                            Size = "90x70",
                            Sku = "987bgh5rd3",
                            Title = "Hungry fox"
                        },
                        new
                        {
                            Id = 18,
                            Description = "The castle captured in the time of wealth was painted using the technique of water colors.",
                            Image = "2023-06-23-07-47-10_castel.jpg",
                            InStock = 3m,
                            Price = 680.00m,
                            Size = "90x70",
                            Sku = "g38ks9e567",
                            Title = "Castle in time"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Little girl in her mind on the grass using ink wash technic.",
                            Image = "2023-06-23-07-47-40_girl.jpg",
                            InStock = 1m,
                            Price = 600.00m,
                            Size = "90x50",
                            Sku = "kt85ffps55",
                            Title = "A girl with a heavy heart"
                        },
                        new
                        {
                            Id = 20,
                            Description = "The painting called Heaven and Hell is an abstract art created by observing the sky during a storm, and it was painted using the oil on canvas technique.",
                            Image = "2023-06-23-06-57-21_tunder.jpg",
                            InStock = 2m,
                            Price = 490.00m,
                            Size = "90x70",
                            Sku = "j8z08jut54",
                            Title = "Heaven and hell"
                        },
                        new
                        {
                            Id = 21,
                            Description = "City calm is a work of art created using the drawing technique on canvas.",
                            Image = "2023-06-23-07-48-02_town.jpg",
                            InStock = 4m,
                            Price = 270.00m,
                            Size = "50x70",
                            Sku = "dh46dje9ii",
                            Title = "City calm"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Mountains in winter is a work of art created using the acrylic technique on canvas, which depicts the idyll of winter in a mountainous area.",
                            Image = "2023-06-25-09-56-41_snow.jpg",
                            InStock = 2m,
                            Price = 380.00m,
                            Size = "50x80",
                            Sku = "ju876tr45d",
                            Title = "Mountains in winterm"
                        });
                });

            modelBuilder.Entity("GalleryWebShop.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            ProductId = 20
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            ProductId = 14
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            ProductId = 15
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            ProductId = 18
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            ProductId = 19
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            ProductId = 21
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            ProductId = 22
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cd565eeb-2aa6-4d57-b195-61fc9aa24d7b",
                            ConcurrencyStamp = "1b0b3ddf-1801-4444-9cee-76486f233ccf",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eb4dfb7e-763f-4109-8de3-fd3e59219d80",
                            ConcurrencyStamp = "0d3ddfa6-c238-4bc1-8d7a-2cfbaead6cd7",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a7966536-0d4c-4a62-ae00-88a09ab5a000",
                            RoleId = "cd565eeb-2aa6-4d57-b195-61fc9aa24d7b"
                        },
                        new
                        {
                            UserId = "0723229f-5f2d-41d6-9623-dfa2f77b9c4a",
                            RoleId = "eb4dfb7e-763f-4109-8de3-fd3e59219d80"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GalleryWebShop.Models.Order", b =>
                {
                    b.HasOne("GalleryWebShop.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GalleryWebShop.Models.OrderItem", b =>
                {
                    b.HasOne("GalleryWebShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GalleryWebShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GalleryWebShop.Models.ProductCategory", b =>
                {
                    b.HasOne("GalleryWebShop.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GalleryWebShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GalleryWebShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GalleryWebShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GalleryWebShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GalleryWebShop.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
